import * as fs from "fs";
import { XMLParser } from "fast-xml-parser";

export function convertJUnitToCustomXML(inputFile: string, outputFile: string) {
  const xmlData = fs.readFileSync(inputFile, "utf-8");

  const parser = new XMLParser({ ignoreAttributes: false });
  const jsonObj = parser.parse(xmlData);

  const testSuites = jsonObj.testsuites.testsuite;
  let passed: any[] = [];
  let failed: any[] = [];
  let skipped: any[] = [];

  for (const suite of Array.isArray(testSuites) ? testSuites : [testSuites]) {
    const testCases = suite.testcase;
    for (const tc of Array.isArray(testCases) ? testCases : [testCases]) {
      const name = tc["@_name"];
      const script = { "@_id": "", "@_name": name };

      if (tc.failure) {
        failed.push(script);
      } else if (tc.skipped !== undefined) {
        skipped.push(script);
      } else {
        passed.push(script);
      }
    }
  }

  let resultXml = `<resultsData>\n`;

  if (failed.length > 0) {
    resultXml += `  <failed>\n`;
    failed.forEach(tc => {
      resultXml += `    <testScript id="${tc['@_id']}" name="${tc['@_name']}"/>\n`;
    });
    resultXml += `  </failed>\n`;
  }

  if (passed.length > 0) {
    resultXml += `  <passed>\n`;
    passed.forEach(tc => {
      resultXml += `    <testScript id="${tc['@_id']}" name="${tc['@_name']}"/>\n`;
    });
    resultXml += `  </passed>\n`;
  }

  if (skipped.length > 0) {
    resultXml += `  <skipped>\n`;
    skipped.forEach(tc => {
      resultXml += `    <testScript id="${tc['@_id']}" name="${tc['@_name']}"/>\n`;
    });
    resultXml += `  </skipped>\n`;
  }

  // executing placeholder (always present)
  resultXml += `  <executing/>\n`;

  // total count
  resultXml += `  <numberOfScripts>${passed.length + failed.length + skipped.length}</numberOfScripts>\n`;

  resultXml += `</resultsData>\n`;

  fs.writeFileSync(outputFile, resultXml, "utf-8");

  console.log(`‚úÖ Custom XML report created at: ${outputFile}`);
}




import type { PlaywrightTestConfig, FullConfig } from "@playwright/test";
import { convertJUnitToCustomXML } from "./convert-report";

// Helper to generate timestamp: YYYYMMDD_HHMMSS
function getTimestamp() {
  const now = new Date();
  const pad = (n: number) => n.toString().padStart(2, "0");
  return (
    now.getFullYear().toString() +
    pad(now.getMonth() + 1) +
    pad(now.getDate()) +
    "_" +
    pad(now.getHours()) +
    pad(now.getMinutes()) +
    pad(now.getSeconds())
  );
}

// Global teardown function
async function globalTeardown(config: FullConfig) {
  const timestamp = getTimestamp();

  // Input JUnit XML (generated by Playwright reporter)
  const inputFile = "results/junit-results.xml";

  // Output custom XML with timestamp
  const outputFile = `results/custom-results_${timestamp}.xml`;

  console.log(`üìù Converting ${inputFile} ‚Üí ${outputFile}`);
  convertJUnitToCustomXML(inputFile, outputFile);
}

// Playwright configuration
const config: PlaywrightTestConfig = {
  testDir: "./tests", // adjust if your test folder is different
  timeout: 30 * 1000, // 30s per test
  reporter: [
    ["junit", { outputFile: "results/junit-results.xml" }], // JUnit XML
    ["list"], // optional console reporter
  ],
  globalTeardown, // <-- runs automatically after all tests
  use: {
    headless: true, // run in headless mode
    screenshot: "only-on-failure",
    trace: "on-first-retry",
  },
};

export default config;

import fs from "fs";
import path from "path";
import { FullConfig } from "@playwright/test";
import { convertJUnitToCustomXML } from "./convert-report";

function waitForFile(filePath: string, timeout = 10000, interval = 500) {
  return new Promise<void>((resolve, reject) => {
    const start = Date.now();
    let lastSize = -1;

    const check = () => {
      if (fs.existsSync(filePath)) {
        const stats = fs.statSync(filePath);
        if (stats.size > 0 && stats.size === lastSize) {
          return resolve(); // file exists and stable
        }
        lastSize = stats.size;
      }
      if (Date.now() - start > timeout) {
        return reject(new Error(`File ${filePath} not ready after ${timeout}ms`));
      }
      setTimeout(check, interval);
    };
    check();
  });
}

export default async function globalTeardown(config: FullConfig) {
  const inputFile = path.resolve(__dirname, "../junit-results/junit-results.xml");
  const outputFolder = path.resolve(__dirname, "../Results");
  if (!fs.existsSync(outputFolder)) fs.mkdirSync(outputFolder, { recursive: true });
  const outputFile = path.join(outputFolder, "results.xml");

  try {
    console.log(`‚è≥ Waiting for JUnit XML to be fully written: ${inputFile}`);
    await waitForFile(inputFile, 15000, 500); // wait max 15s
    console.log(`üìù Converting ${inputFile} ‚Üí ${outputFile}`);
    convertJUnitToCustomXML(inputFile, outputFile);
  } catch (err) {
    console.error(`‚ö†Ô∏è Could not find or stabilize input file: ${err.message}`);
  }
}



import { FullResult, Reporter } from '@playwright/test/reporter';
import { convertJUnitToCustomXML } from './convert-report';
import fs from 'fs';
import path from 'path';

export default class JUnitConverterReporter implements Reporter {
  onBegin?(config, suite) {} // optional
  onTestBegin?(test) {}      // optional
  onTestEnd?(test, result) {} // optional

  async onEnd(result: FullResult) {
    const inputFile = path.resolve('junit-results/junit-results.xml');
    const outputFolder = path.resolve('Results');
    if (!fs.existsSync(outputFolder)) fs.mkdirSync(outputFolder, { recursive: true });
    const outputFile = path.join(outputFolder, 'results.xml');

    if (!fs.existsSync(inputFile)) {
      console.warn(`‚ö†Ô∏è Input file not found: ${inputFile}`);
      return;
    }

    convertJUnitToCustomXML(inputFile, outputFile);
  }
}
