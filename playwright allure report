import fs from 'fs-extra';
import path from 'path';
import { execSync } from 'child_process';
import dotenv from 'dotenv';
import AdmZip from 'adm-zip';

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, './config/.env') });

// Resolve Allure paths
const ALLURE_RESULTS = path.resolve(process.env.ALLURE_RESULTS || 'C:/PlaywrightReports/allure-results');
const ALLURE_REPORT = path.resolve(process.env.ALLURE_REPORT || 'C:/PlaywrightReports/allure-report');
const ALLURE_BACKUP = path.resolve(process.env.ALLURE_BACKUP || 'C:/PlaywrightReports/Allure_Backup');
const ALLURE_ZIPS = path.resolve(process.env.ALLURE_ZIPS || 'C:/PlaywrightReports/allure-zips');
const AUTO_OPEN = (process.env.ALLURE_AUTOOPEN || 'no').toLowerCase() === 'yes';

async function globalTeardown() {
  console.log('\nüßπ Starting global teardown...');

  // 1Ô∏è‚É£ Clean old allure-results folder safely
  if (fs.existsSync(ALLURE_RESULTS)) {
    console.log(`üßΩ Cleaning old allure results: ${ALLURE_RESULTS}`);
    await new Promise(r => setTimeout(r, 500));
    fs.rmSync(ALLURE_RESULTS, { recursive: true, force: true });
  }
  fs.ensureDirSync(ALLURE_RESULTS);

  // 2Ô∏è‚É£ Backup previous allure-report
  if (fs.existsSync(ALLURE_REPORT)) {
    fs.ensureDirSync(ALLURE_BACKUP);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFolder = path.join(ALLURE_BACKUP, `AllureReport_${timestamp}`);
    fs.renameSync(ALLURE_REPORT, backupFolder);
    console.log(`üì¶ Backed up previous Allure report to: ${backupFolder}`);
  }

  // 3Ô∏è‚É£ Generate new Allure report
  try {
    console.log(`üìä Generating Allure report...`);
    execSync(`npx allure generate "${ALLURE_RESULTS}" -o "${ALLURE_REPORT}" --clean`, { stdio: 'inherit' });
    console.log(`‚úÖ Allure report generated at: ${ALLURE_REPORT}`);
  } catch (err) {
    console.error(`‚ùå Failed to generate Allure report.`, err);
    return;
  }

  // 4Ô∏è‚É£ Add portable "start-server.bat" for easy sharing
  const batFilePath = path.join(ALLURE_REPORT, 'start-server.bat');
  const batContent = `
@echo off
echo Launching Allure Report on local server...
cd /d "%~dp0"
echo Starting temporary server...
npx http-server -p 8080
pause
  `;
  fs.writeFileSync(batFilePath, batContent);
  console.log('üñ•Ô∏è Added start-server.bat to Allure report.');

  // 5Ô∏è‚É£ Zip the full report (with start-server.bat)
  fs.ensureDirSync(ALLURE_ZIPS);
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const zipName = `AllureReport_${timestamp}.zip`;
  const zipPath = path.join(ALLURE_ZIPS, zipName);

  const zip = new AdmZip();
  zip.addLocalFolder(ALLURE_REPORT);
  zip.writeZip(zipPath);
  console.log(`üì¶ Zipped report created at: ${zipPath}`);

  // 6Ô∏è‚É£ Optionally open Allure UI automatically
  if (AUTO_OPEN) {
    console.log('üåê Opening Allure report in browser...');
    execSync(`npx allure open "${ALLURE_REPORT}"`, { stdio: 'ignore' });
  }

  console.log('‚úÖ Global teardown completed successfully.');
}

export default globalTeardown;


# Allure configuration
ALLURE_RESULTS=C:/PlaywrightReports/allure-results
ALLURE_REPORT=C:/PlaywrightReports/allure-report
ALLURE_BACKUP=C:/PlaywrightReports/Allure_Backup
ALLURE_ZIPS=C:/PlaywrightReports/allure-zips
ALLURE_AUTOOPEN=yes  # yes/no


