# Execution
RUN_MODE=excel                 # options: excel, runList, suite

# Browser
BROWSER=chromium
HEADLESS=true

# Reporting
ALLURE_ENABLED=yes
ALLURE_RESULTS=./allure-results
ALLURE_REPORT=C:/Reports/Allure
ALLURE_AUTOOPEN=yes
ALLURE_ZIP=yes

JUNIT_ENABLED=yes
HTML_REPORT=yes

# Other settings
ENVIRONMENT=qa
BASE_URL=https://qa.example.com
RETRIES=1
TIMEOUT=30000




import { defineConfig } from '@playwright/test';
import * as dotenv from 'dotenv';
dotenv.config({ path: './config/.env' });  // Load env

export default defineConfig({
  testDir: './tests',
  timeout: parseInt(process.env.TIMEOUT || '30000'),
  retries: parseInt(process.env.RETRIES || '0'),
  use: {
    browserName: process.env.BROWSER || 'chromium',
    headless: process.env.HEADLESS === 'true',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
  },
  reporter: [
    ['line'],
    ['junit', { outputFile: 'junit-report/results.xml', outputFileTemplate: '{test}.xml', includeConsoleOutput: true }],
    ['html', { outputFolder: 'html-report', open: 'never' }],
    ['allure-playwright'],
  ],
  globalTeardown: require.resolve('./utils/globalTeardown.ts'),
});



import * as dotenv from 'dotenv';
import { execSync } from 'child_process';
import fs from 'fs';
import archiver from 'archiver';
import path from 'path';

dotenv.config({ path: './config/.env' });

export default async function globalTeardown() {
  console.log('\nüöÄ Global teardown started...');

  const IS_ALLURE_ENABLED = process.env.ALLURE_ENABLED === 'yes';
  const IS_JUNIT_ENABLED = process.env.JUNIT_ENABLED === 'yes';
  const IS_HTML_ENABLED = process.env.HTML_REPORT === 'yes';
  const ALLURE_RESULTS = process.env.ALLURE_RESULTS || './allure-results';
  const ALLURE_REPORT = process.env.ALLURE_REPORT || './allure-report';
  const ALLURE_AUTOOPEN = process.env.ALLURE_AUTOOPEN === 'yes';
  const ALLURE_ZIP = process.env.ALLURE_ZIP === 'yes';

  try {
    // ---------- Allure ----------
    if (IS_ALLURE_ENABLED) {
      console.log('üìä Generating Allure Report...');
      execSync(`npx allure generate ${ALLURE_RESULTS} --clean -o "${ALLURE_REPORT}"`, { stdio: 'inherit' });
      console.log(`‚úÖ Allure Report generated at ${ALLURE_REPORT}`);

      if (ALLURE_AUTOOPEN) {
        console.log('üåê Opening Allure Report in default browser...');
        execSync(`npx allure open "${ALLURE_REPORT}"`, { stdio: 'inherit' });
      }

      if (ALLURE_ZIP) {
        const outputZip = path.resolve(`${ALLURE_REPORT}.zip`);
        const output = fs.createWriteStream(outputZip);
        const archive = archiver('zip', { zlib: { level: 9 } });
        archive.pipe(output);
        archive.directory(ALLURE_REPORT, false);
        await archive.finalize();
        console.log(`üì¶ Allure report zipped at ${outputZip}`);
      }
    }

    // ---------- JUnit ----------
    if (IS_JUNIT_ENABLED) {
      console.log('üìÑ JUnit report already generated by Playwright reporter in ./junit-report/');
    }

    // ---------- HTML ----------
    if (IS_HTML_ENABLED) {
      console.log('üåê HTML report already generated by Playwright reporter in ./html-report/');
    }

  } catch (error) {
    console.error('‚ùå Error in global teardown:', error);
  }

  console.log('üõ†Ô∏è Global teardown completed!');
}



import * as dotenv from 'dotenv';
import { execSync } from 'child_process';
import fs from 'fs';
import archiver from 'archiver';
import path from 'path';

dotenv.config({ path: './config/.env' });

export default async function globalTeardown() {
  console.log('\nüöÄ Global teardown started...');

  const IS_ALLURE_ENABLED = process.env.ALLURE_ENABLED === 'yes';
  const ALLURE_RESULTS = path.resolve(process.env.ALLURE_RESULTS || './allure-results');
  const ALLURE_REPORT = path.resolve(process.env.ALLURE_REPORT || './allure-report');
  const ALLURE_AUTOOPEN = process.env.ALLURE_AUTOOPEN === 'yes';
  const ALLURE_ZIP = process.env.ALLURE_ZIP === 'yes';

  try {
    // ---------- Allure ----------
    if (IS_ALLURE_ENABLED) {
      console.log(`üìä Generating Allure Report from results at: ${ALLURE_RESULTS}`);

      // Ensure results folder exists
      if (!fs.existsSync(ALLURE_RESULTS)) {
        console.warn(`‚ö†Ô∏è Allure results folder not found: ${ALLURE_RESULTS}`);
      } else {
        // Delete previous report folder to avoid conflicts
        if (fs.existsSync(ALLURE_REPORT)) {
          fs.rmSync(ALLURE_REPORT, { recursive: true, force: true });
          console.log(`üóëÔ∏è Cleared previous Allure report at: ${ALLURE_REPORT}`);
        }

        // Generate Allure report
        execSync(`npx allure generate "${ALLURE_RESULTS}" --clean -o "${ALLURE_REPORT}"`, { stdio: 'inherit' });
        console.log(`‚úÖ Allure report generated at: ${ALLURE_REPORT}`);

        // Auto-open report in default browser
        if (ALLURE_AUTOOPEN) {
          console.log('üåê Opening Allure report in default browser...');
          execSync(`npx allure open "${ALLURE_REPORT}"`, { stdio: 'inherit' });
        }

        // Optional: Zip report
        if (ALLURE_ZIP) {
          const outputZip = path.resolve(`${ALLURE_REPORT}.zip`);
          const output = fs.createWriteStream(outputZip);
          const archive = archiver('zip', { zlib: { level: 9 } });
          archive.pipe(output);
          archive.directory(ALLURE_REPORT, false);
          await archive.finalize();
          console.log(`üì¶ Allure report zipped at: ${outputZip}`);
        }
      }
    }

    // ---------- JUnit ----------
    if (process.env.JUNIT_ENABLED === 'yes') {
      console.log('üìÑ JUnit report generated by reporter in ./junit-report/');
    }

    // ---------- HTML ----------
    if (process.env.HTML_REPORT === 'yes') {
      console.log('üåê HTML report generated by reporter in ./html-report/');
    }

  } catch (error) {
    console.error('‚ùå Error in global teardown:', error);
  }

  console.log('üõ†Ô∏è Global teardown completed!');
}






