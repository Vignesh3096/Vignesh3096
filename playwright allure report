import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import dotenv from 'dotenv';

dotenv.config({ path: path.resolve(__dirname, './config/.env') });

async function globalTeardown() {
  const allureResults = process.env.ALLURE_RESULTS || 'C:/PlaywrightReports/allure-results';
  const allureReport = process.env.ALLURE_REPORT || 'C:/PlaywrightReports/allure-report';
  const allureBackup = process.env.ALLURE_BACKUP || 'C:/PlaywrightReports/allure-backup';
  const generateReport = process.env.ALLURE_GENERATE === 'true'; // only generate if true
  const openReport = process.env.ALLURE_OPEN === 'true'; // optional open toggle

  // Helper: Ensure folder exists
  const ensureFolder = (folderPath: string) => {
    if (!fs.existsSync(folderPath)) {
      fs.mkdirSync(folderPath, { recursive: true });
      console.log(`📁 Created: ${folderPath}`);
    }
  };

  console.log('\n🧹 Cleaning and preparing Allure folders...');

  // Clean allure-results
  if (fs.existsSync(allureResults)) {
    fs.rmSync(allureResults, { recursive: true, force: true });
    console.log(`🗑️ Deleted old results: ${allureResults}`);
  }
  ensureFolder(allureResults);
  ensureFolder(allureReport);
  ensureFolder(allureBackup);

  // 🧾 Generate report (optional)
  if (generateReport) {
    console.log('\n📊 Generating Allure report...');
    try {
      execSync(`allure generate "${allureResults}" -o "${allureReport}" --clean`, { stdio: 'inherit' });
      console.log('✅ Allure report generated successfully.');
    } catch (err) {
      console.error('❌ Failed to generate Allure report:', err);
    }

    // 🗜️ Zip backup
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const zipName = `AllureReport_${timestamp}.zip`;
    const zipPath = path.join(allureBackup, zipName);

    try {
      execSync(`powershell Compress-Archive -Path "${allureReport}\\*" -DestinationPath "${zipPath}"`, { stdio: 'inherit' });
      console.log(`📦 Report archived at: ${zipPath}`);
    } catch (err) {
      console.error('❌ Failed to zip report:', err);
    }

    // 🌐 Optionally open the report in a browser
    if (openReport) {
      try {
        execSync(`allure open "${allureReport}"`, { stdio: 'inherit' });
        console.log('🌍 Allure report opened in browser.');
      } catch (err) {
        console.error('❌ Failed to open Allure report:', err);
      }
    }
  } else {
    console.log('⚙️ Skipped Allure report generation (ALLURE_GENERATE=false)');
  }

  console.log('\n🎯 Global teardown completed.');
}

export default globalTeardown;


import { defineConfig } from '@playwright/test';
import dotenv from 'dotenv';
import path from 'path';

dotenv.config({ path: path.resolve(__dirname, './config/.env') });

export default defineConfig({
  reporter: [
    ['list'],
    ['allure-playwright', { outputFolder: process.env.ALLURE_RESULTS }]
  ],
  globalTeardown: require.resolve('./globalTeardown'),
});


ALLURE_RESULTS=C:/PlaywrightReports/allure-results
ALLURE_REPORT=C:/PlaywrightReports/allure-report
ALLURE_BACKUP=C:/PlaywrightReports/allure-backup

# Control generation behavior
ALLURE_GENERATE=true
ALLURE_OPEN=false



