import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import archiver from 'archiver';
import dotenv from 'dotenv';

dotenv.config({ path: path.resolve(__dirname, './config/.env') });

async function globalTeardown() {
  const resultsDir = path.resolve(process.env.ALLURE_RESULTS!);
  const reportDir = path.resolve(process.env.ALLURE_REPORT!);
  const backupDir = path.resolve(process.env.ALLURE_BACKUP!);

  if (process.env.ALLURE_GENERATE === 'true') {
    try {
      // ✅ Generate Allure HTML report
      execSync(`allure generate "${resultsDir}" --clean -o "${reportDir}"`, { stdio: 'inherit' });

      // ✅ Create portable launcher scripts
      const batFile = path.join(reportDir, 'start-report.bat');
      const shFile = path.join(reportDir, 'start-report.sh');
      const indexFile = path.join(reportDir, 'index.html');

      const batContent = `@echo off
echo Starting Allure report server on http://localhost:8888 ...
start "" "http://localhost:8888"
python -m http.server 8888 --directory "%~dp0"
pause`;

      fs.writeFileSync(batFile, batContent, 'utf-8');

      const shContent = `#!/bin/bash
echo "Starting Allure report server on http://localhost:8888 ..."
open "http://localhost:8888" 2>/dev/null || xdg-open "http://localhost:8888"
python3 -m http.server 8888 --directory "$(dirname "$0")"`;

      fs.writeFileSync(shFile, shContent, { mode: 0o755 });

      // ✅ Zip the full report folder for sharing
      fs.mkdirSync(backupDir, { recursive: true });
      const zipFile = path.join(backupDir, `allure-report-${Date.now()}.zip`);
      const output = fs.createWriteStream(zipFile);
      const archive = archiver('zip', { zlib: { level: 9 } });
      archive.pipe(output);
      archive.directory(reportDir, false);
      await archive.finalize();

      console.log(`✅ Allure report generated and zipped: ${zipFile}`);

      // ✅ Auto-open the local report on the tester’s machine
      execSync(`start "" "${indexFile}"`, { stdio: 'ignore' });

    } catch (error) {
      console.error('❌ Error generating Allure report:', error);
    }
  }
}

export default globalTeardown;