import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import AdmZip from "adm-zip";

export default async function globalTeardown() {
  try {
    // Base folder for reports (outside project)
    const baseReportPath = "C:\\playwrightReports";
    const resultsDir = path.join(process.cwd(), "allure-results");
    const reportDir = path.join(baseReportPath, "allure-report");
    const backupDir = path.join(baseReportPath, "allure-backup");

    console.log("üßπ Cleaning up old Allure results...");

    // Delete old allure-results folder if it exists
    if (fs.existsSync(resultsDir)) {
      fs.rmSync(resultsDir, { recursive: true, force: true });
      console.log("‚úÖ Old allure-results deleted");
    }

    // Ensure base directories exist
    [baseReportPath, backupDir].forEach((dir) => {
      if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    });

    console.log("üìä Generating new Allure report...");

    // Generate allure report
    execSync(`npx allure generate "${resultsDir}" --clean -o "${reportDir}"`, {
      stdio: "inherit",
    });

    console.log("‚úÖ Allure report generated successfully at:", reportDir);

    // Zip report folder into backup folder
    const timestamp = new Date()
      .toISOString()
      .replace(/[:.]/g, "-")
      .replace("T", "_")
      .split("Z")[0];

    const zipFilePath = path.join(
      backupDir,
      `Allure_Report_${timestamp}.zip`
    );

    const zip = new AdmZip();
    zip.addLocalFolder(reportDir);
    zip.writeZip(zipFilePath);

    console.log(`üì¶ Report zipped successfully: ${zipFilePath}`);

  } catch (error) {
    console.error("‚ùå Error in global teardown:", error);
  }
}