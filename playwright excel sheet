import XLSX from 'xlsx';
import path from 'path';
import { getRunList } from './runListReader';

export function getExecutableTests(excelFile: string, sheetName: string): string[] {
  const filePath = path.resolve('data/testdata', excelFile);
  const workbook = XLSX.readFile(filePath);
  const sheet = workbook.Sheets[sheetName];
  if (!sheet) throw new Error(`Sheet "${sheetName}" not found in ${excelFile}`);
  const rows: any[] = XLSX.utils.sheet_to_json(sheet, { defval: '' });

  // Only return testCaseName where execute = Yes
  return rows
    .filter(r => String(r.execute).trim().toLowerCase() === 'yes')
    .map(r => String(r.testCaseName).trim());
}

export function getTestData(excelFile: string, sheetName: string, testCaseName: string): any {
  const filePath = path.resolve('data/testdata', excelFile);
  const workbook = XLSX.readFile(filePath);
  const sheet = workbook.Sheets[sheetName];
  if (!sheet) throw new Error(`Sheet "${sheetName}" not found in ${excelFile}`);
  const rows: any[] = XLSX.utils.sheet_to_json(sheet, { defval: '' });

  const row = rows.find(r => String(r.testCaseName).trim() === testCaseName);
  if (!row) throw new Error(`Test case "${testCaseName}" not found in sheet "${sheetName}"`);
  return row;
}

export function getExecutableTestsForMode(
  excelFile: string,
  sheetName: string,
  mode: string
): string[] {
  if (mode === 'excel') return getExecutableTests(excelFile, sheetName);
  if (mode === 'runlist') return getRunList()[sheetName] || [];
  return [];
}

import fs from 'fs';
import path from 'path';

export function getRunList(): Record<string, string[]> {
  const filePath = path.resolve('config/runList.json');
  if (!fs.existsSync(filePath)) throw new Error('runList.json not found at ' + filePath);
  const jsonData = fs.readFileSync(filePath, 'utf-8');
  return JSON.parse(jsonData);
}


import { test, expect } from '@playwright/test';
import { getTestData, getExecutableTestsForMode } from '../../utils/testHelper';

const excelFile = 'TestData_Login.xlsx';
const sheetName = 'login';
const mode = process.env.RUN_MODE || 'excel';

// Get all tests to execute based on mode
const executableTests = getExecutableTestsForMode(excelFile, sheetName, mode);

// Only define tests that are executable
if (executableTests.includes('Valid Login')) {
  test('Valid Login', async ({ page }) => {
    const data = getTestData(excelFile, sheetName, 'Valid Login');
    await page.goto(data.url);
    await page.fill('#username', data.username);
    await page.fill('#password', data.password);
    await page.click('#loginBtn');
    await expect(page).toHaveURL(/dashboard/);
  });
}

if (executableTests.includes('Invalid Login')) {
  test('Invalid Login', async ({ page }) => {
    const data = getTestData(excelFile, sheetName, 'Invalid Login');
    await page.goto(data.url);
    await page.fill('#username', data.username);
    await page.fill('#password', data.password);
    await page.click('#loginBtn');
    await expect(page.locator('#error')).toBeVisible();
  });
}





