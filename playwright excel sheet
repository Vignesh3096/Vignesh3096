import * as XLSX from 'xlsx';
import path from 'path';

export interface TestRow {
  testCaseName: string;
  execute: string;
  [key: string]: any;
}

/**
 * Read all rows from a sheet
 */
export function readSheet(excelFile: string, sheetName: string): TestRow[] {
  const workbookPath = path.resolve(`data/testdata/${excelFile}`);
  const workbook = XLSX.readFile(workbookPath);

  if (!workbook.SheetNames.includes(sheetName)) return [];

  return XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);
}


import { TestRow, readSheet } from './excelReader';
import { getRunList } from './runListReader';
import { getSuiteList } from './suiteReader';
import { getExecutionMode, getSuiteName } from './configManager';

const mode = getExecutionMode();
const suiteName = getSuiteName();

// Cache for each sheet
const sheetCache: Record<string, TestRow[]> = {};

/**
 * Get all executable test names for a sheet
 */
export function getExecutableTests(excelFile: string, sheetName: string): string[] {
  const sheetData = getSheetData(excelFile, sheetName);

  if (mode === 'excel') {
    return sheetData.filter(row => row.execute?.toLowerCase() === 'yes')
                    .map(row => row.testCaseName);
  }

  if (mode === 'runlist') {
    const runList = getRunList();
    return runList?.[sheetName] || [];
  }

  if (mode === 'suite') {
    const suiteTests = getSuiteList(suiteName!);
    return suiteTests;
  }

  return [];
}

/**
 * Fetch a single test case's data from cached sheet
 */
export function getTestData(excelFile: string, sheetName: string, testCaseName: string): TestRow | null {
  const sheetData = getSheetData(excelFile, sheetName);
  return sheetData.find(row => row.testCaseName === testCaseName) || null;
}

/**
 * Read sheet once and cache it
 */
function getSheetData(excelFile: string, sheetName: string): TestRow[] {
  const cacheKey = `${excelFile}_${sheetName}`;
  if (!sheetCache[cacheKey]) {
    sheetCache[cacheKey] = readSheet(excelFile, sheetName);
  }
  return sheetCache[cacheKey];
}


export type Mode = 'excel' | 'runlist' | 'suite';

export function getExecutionMode(): Mode {
  return (process.env.EXEC_MODE as Mode) || 'excel';
}

export function getSuiteName(): string | null {
  return process.env.SUITE_NAME || null;
}



import { test, expect } from '@playwright/test';
import { getExecutableTests, getTestData } from '../../utils/testHelper';

const excelFile = 'testdata_app1.xlsx';
const sheetName = 'login';

// Pre-fetch all executable test names once
const executableTests = getExecutableTests(excelFile, sheetName);

test('Valid Login', async ({ page }) => {
  if (!executableTests.includes('Valid Login')) test.skip();

  const data = getTestData(excelFile, sheetName, 'Valid Login');
  if (!data) throw new Error('Test data not found!');

  await page.goto(data.url);
  await page.fill('#username', data.username);
  await page.fill('#password', data.password);
  await page.click('#loginBtn');

  await expect(page).toHaveURL(/dashboard/);
});

test('Invalid Login', async ({ page }) => {
  if (!executableTests.includes('Invalid Login')) test.skip();

  const data = getTestData(excelFile, sheetName, 'Invalid Login');
  if (!data) throw new Error('Test data not found!');

  await page.goto(data.url);
  await page.fill('#username', data.username);
  await page.fill('#password', data.password);
  await page.click('#loginBtn');

  await expect(page.locator('#error')).toBeVisible();
});



import { test, expect } from '@playwright/test';
import { getExecutableTests, getTestData } from '../../utils/testHelper';
import { getRunList } from '../../utils/runListReader';

const excelFile = 'TestData_App1.xlsx';
const sheetName = 'login';

const mode = process.env.RUN_MODE || 'excel';

let executableTests: string[] = [];

// 1️⃣ Determine which tests to execute
if (mode === 'excel') {
  executableTests = getExecutableTests(excelFile, sheetName);
} else if (mode === 'runlist') {
  executableTests = getRunList()[sheetName] || [];
}

// 2️⃣ Define normal test methods only if they are executable
if (executableTests.includes('Valid Login')) {
  test('Valid Login', async ({ page }) => {
    const data = getTestData(excelFile, sheetName, 'Valid Login');
    await page.goto(data.url);
    await page.fill('#username', data.username);
    await page.fill('#password', data.password);
    await page.click('#loginBtn');
    await expect(page).toHaveURL(/dashboard/);
  });
}

if (executableTests.includes('Invalid Login')) {
  test('Invalid Login', async ({ page }) => {
    const data = getTestData(excelFile, sheetName, 'Invalid Login');
    await page.goto(data.url);
    await page.fill('#username', data.username);
    await page.fill('#password', data.password);
    await page.click('#loginBtn');
    await expect(page.locator('#error')).toBeVisible();
  });
}



