Success Story â€“ Automating SAP EPM with Sikuli (Java)

1. Executive Summary

Our team successfully automated SAP EPM (Enterprise Performance Management) testing by migrating from Tosca to Sikuli (Java-based framework).
Earlier, Tosca struggled with fetching data from complex EPM grids and handling drill-through workflows due to non-standard UI elements and dynamic browser extensions. By adopting Sikuliâ€™s image-recognition approach, we achieved greater stability, faster execution, and reduced maintenance overhead.

â¸»

2. Challenges with Tosca
	1.	Data Fetching Issues
	â€¢	SAP EPM reports often render as canvas-based grids or custom tables not directly exposed to Toscaâ€™s object model.
	â€¢	Extracting KPIs, totals, and variances was unreliable.
	2.	Drill-Through Automation Failures
	â€¢	Drill-through workflows triggered new windows, pop-ups, and iframes with dynamic locators.
	â€¢	Tosca often failed due to browser extension updates and locator instability.
	3.	Environment Sensitivity
	â€¢	Different DPI settings, browsers, and VDI environments caused frequent script breakages.
	4.	Execution Speed
	â€¢	Tosca test runs were slow compared to Selenium-based or lightweight automation.
	â€¢	Frequent workarounds were required, increasing maintenance effort.

â¸»

3. Why Sikuli (Java)?
	â€¢	Image-Based Recognition: Works directly with screenshots of UI elements â†’ independent of DOM or technology.
	â€¢	Cross-Technology Compatibility: Handles SAP EPM grids, context menus, drill-through reports, and even Citrix/VDI sessions.
	â€¢	Drill-Through Friendly: Right-click menus, modal dialogs, and nested windows are automated using pattern matching.
	â€¢	Built-In Visual Evidence: Every step can capture screenshots, making reporting transparent for audits.
	â€¢	Java Integration: Seamless integration with JUnit/TestNG, Maven/Gradle, and Jenkins CI/CD pipelines.

â¸»

4. Solution Approach
	â€¢	Framework Stack:
	â€¢	SikuliX (Java API) for automation
	â€¢	TestNG for execution and assertions
	â€¢	Allure/Extent Reports for reporting and screenshots
	â€¢	Maven + Jenkins for CI/CD
	â€¢	Reusable Modules Developed:
	â€¢	Login to SAP EPM
	â€¢	Open specific reports
	â€¢	Perform drill-through and validate fetched data
	â€¢	Export and compare results with golden datasets
	â€¢	Image Handling Best Practices:
	â€¢	Captured patterns at standard resolution and scaling
	â€¢	Stored multiple variants (light/dark theme, high DPI)
	â€¢	Organized images into version-controlled folders

â¸»

5. Results & Benefits

âœ… 95%+ test stability in drill-through scenarios compared to ~60% with Tosca
âœ… Execution time reduced by ~65% compared to manual and ~30% compared to Tosca
âœ… Maintenance effort reduced by 40%, as no object rescanning is required
âœ… Improved audit compliance: Each step has screenshot evidence stored automatically
âœ… CI/CD ready: Runs nightly in Jenkins, enabling faster regression cycles before releases

â¸»

6. Lessons Learned
	â€¢	Image-based testing requires careful pattern management (consistent DPI, theme).
	â€¢	Combining Sikuli with Java assertions makes validations more reliable than visual checks alone.
	â€¢	Regularly updating the image repository ensures resilience against UI changes.
	â€¢	For highly dynamic content, hybrid approach (Sikuli + database/API checks) improves robustness.

â¸»

7. Conclusion

Migrating from Tosca to Sikuli (Java) transformed SAP EPM automation for our team.
We achieved greater stability, faster execution, and stronger audit evidence while reducing overall maintenance cost. The framework is now scalable to handle additional EPM reports, workflows, and business-critical scenarios.

â¸»

ðŸ‘‰ Would you like me to also make this into a presentation-style (PowerPoint format) success story so you can share it with leadership?