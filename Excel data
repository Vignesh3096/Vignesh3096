import org.apache.poi.ss.usermodel.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DecimalFormat;

public class ExcelColumnValueSearch {
    public static void main(String[] args) {
        // Path to the Excel file
        String filePath = "your_excel_file.xlsx";

        // Sheet name to search
        String sheetName = "Sheet1";

        // Column name to retrieve values from
        String columnName = "Column1";

        try (FileInputStream fileInputStream = new FileInputStream(new File(filePath));
             Workbook workbook = WorkbookFactory.create(fileInputStream)) {

            // Get the sheet by name
            Sheet sheet = workbook.getSheet(sheetName);
            if (sheet == null) {
                System.out.println("Sheet not found!");
                return;
            }

            // Get the header row to find the column index by column name
            Row headerRow = sheet.getRow(0);
            int columnIndex = -1;
            for (Cell cell : headerRow) {
                if (cell.getStringCellValue().equals(columnName)) {
                    columnIndex = cell.getColumnIndex();
                    break;
                }
            }

            if (columnIndex == -1) {
                System.out.println("Column not found!");
                return;
            }

            // Iterate over rows and retrieve data from the specified column
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row != null) {
                    Cell cell = row.getCell(columnIndex);
                    if (cell != null) {
                        // Check cell type and retrieve value accordingly
                        switch (cell.getCellType()) {
                            case STRING:
                                String stringValue = cell.getStringCellValue();
                                System.out.println("String value at row " + (i + 1) + ": " + stringValue);
                                break;
                            case NUMERIC:
                                if (DateUtil.isCellDateFormatted(cell)) {
                                    System.out.println("Date value at row " + (i + 1) + ": " + cell.getDateCellValue());
                                } else {
                                    // Format numeric value as string without exponential notation
                                    double numericValue = cell.getNumericCellValue();
                                    DecimalFormat decimalFormat = new DecimalFormat("#");
                                    String formattedValue = decimalFormat.format(numericValue);
                                    System.out.println("Numeric value at row " + (i + 1) + ": " + formattedValue);
                                }
                                break;
                            case BOOLEAN:
                                boolean booleanValue = cell.getBooleanCellValue();
                                System.out.println("Boolean value at row " + (i + 1) + ": " + booleanValue);
                                break;
                            case BLANK:
                                // Handle blank cells if needed
                                break;
                            // Handle other cell types if necessary
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InvalidFormatException e) {
            e.printStackTrace();
        }
    }
}