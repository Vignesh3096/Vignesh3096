import org.apache.poi.ss.usermodel.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ExcelReader {
    private String filePath;

    public ExcelReader(String filePath) {
        this.filePath = filePath;
    }

    /**
     * Retrieve values from a specified column in an Excel sheet.
     *
     * @param sheetName  Name of the sheet in the Excel file.
     * @param columnName Name of the column to retrieve values from.
     * @param cellType   Type of cells to retrieve (STRING, NUMERIC, BOOLEAN, etc.).
     * @return List of values retrieved from the specified column.
     */
    public <T> List<T> getColumnValues(String sheetName, String columnName, CellType cellType) {
        List<T> columnValues = new ArrayList<>();
        try (FileInputStream fileInputStream = new FileInputStream(new File(filePath));
             Workbook workbook = WorkbookFactory.create(fileInputStream)) {

            Sheet sheet = workbook.getSheet(sheetName);
            if (sheet == null) {
                System.out.println("Sheet not found!");
                return columnValues;
            }

            int columnIndex = getColumnIndex(sheet, columnName);
            if (columnIndex == -1) {
                System.out.println("Column not found!");
                return columnValues;
            }

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row != null) {
                    Cell cell = row.getCell(columnIndex);
                    if (cell != null && cell.getCellType() == cellType) {
                        switch (cellType) {
                            case STRING:
                                columnValues.add((T) cell.getStringCellValue());
                                break;
                            case NUMERIC:
                                columnValues.add((T) parseNumericCellValue(cell));
                                break;
                            case BOOLEAN:
                                columnValues.add((T) Boolean.valueOf(cell.getBooleanCellValue()));
                                break;
                        }
                    }
                }
            }
        } catch (IOException | InvalidFormatException e) {
            e.printStackTrace();
        }
        return columnValues;
    }

    /**
     * Retrieve date values from a specified column in an Excel sheet.
     *
     * @param sheetName  Name of the sheet in the Excel file.
     * @param columnName Name of the column to retrieve date values from.
     * @return List of date values retrieved from the specified column.
     */
    public List<Date> getColumnDateValues(String sheetName, String columnName) {
        List<Date> dateValues = new ArrayList<>();
        try (FileInputStream fileInputStream = new FileInputStream(new File(filePath));
             Workbook workbook = WorkbookFactory.create(fileInputStream)) {
            Sheet sheet = workbook.getSheet(sheetName);
            if (sheet == null) {
                System.out.println("Sheet not found!");
                return dateValues;
            }
            int columnIndex = getColumnIndex(sheet, columnName);
            if (columnIndex == -1) {
                System.out.println("Column not found!");
                return dateValues;
            }
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row != null) {
                    Cell cell = row.getCell(columnIndex);
                    if (cell != null && cell.getCellType() == CellType.NUMERIC && DateUtil.isCellDateFormatted(cell)) {
                        dateValues.add(cell.getDateCellValue());
                    }
                }
            }
        } catch (IOException | InvalidFormatException e) {
            e.printStackTrace();
        }
        return dateValues;
    }

    /**
     * Retrieve the index of a column by name.
     *
     * @param sheet      The Excel sheet.
     * @param columnName Name of the column.
     * @return Index of the column, or -1 if not found.
     */
    private static int getColumnIndex(Sheet sheet, String columnName) {
        Row headerRow = sheet.getRow(0);
        if (headerRow != null) {
            for (Cell cell : headerRow) {
                if (cell.getStringCellValue().equals(columnName)) {
                    return cell.getColumnIndex();
                }
            }
        }
        return -1;
    }

    /**
     * Parse the numeric cell value, handling E notation.
     *
     * @param cell The cell containing the numeric value.
     * @return The parsed numeric value as Double.
     */
    private static Double parseNumericCellValue(Cell cell) {
        DecimalFormat df = new DecimalFormat("#.#########");
        return Double.parseDouble(df.format(cell.getNumericCellValue()));
    }
}