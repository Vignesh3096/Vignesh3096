import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.SharedStringsTable;
import org.apache.poi.ss.usermodel.*;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;

public class ExcelUniqueValuesSAX {

    // Method to get unique values from the specified column in a given sheet
    public static Set<String> getUniqueValues(String excelFilePath, String targetSheetName, String targetColumnName) {
        Set<String> uniqueValues = new HashSet<>();

        try (FileInputStream fis = new FileInputStream(excelFilePath)) {
            // Open the Excel file package
            OPCPackage pkg = OPCPackage.open(fis);
            XSSFReader reader = new XSSFReader(pkg);

            // Get shared strings XML and parse the shared strings
            List<String> sharedStrings = parseSharedStrings(reader);

            // Iterate through sheets to find the target sheet
            XSSFReader.SheetIterator sheets = (XSSFReader.SheetIterator) reader.getSheetsData();
            InputStream targetSheetStream = null;
            while (sheets.hasNext()) {
                InputStream sheetStream = sheets.next();
                if (sheets.getSheetName().equalsIgnoreCase(targetSheetName)) {
                    targetSheetStream = sheetStream;
                    break;
                }
                sheetStream.close();
            }

            if (targetSheetStream == null) {
                System.out.println("Sheet name '" + targetSheetName + "' not found.");
                return uniqueValues;
            }

            // Create SAX parser
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();
            XMLReader xmlReader = saxParser.getXMLReader();

            // Create the handler for processing the sheet
            UniqueValueHandler handler = new UniqueValueHandler(targetColumnName, sharedStrings);
            xmlReader.setContentHandler(handler);

            // Parse the sheet
            InputSource sheetSource = new InputSource(targetSheetStream);
            xmlReader.parse(sheetSource);

            // Output the unique values
            uniqueValues = handler.getUniqueValues();

            // Close the stream and package
            targetSheetStream.close();
            pkg.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        return uniqueValues;
    }

    // Method to parse shared strings from sharedStrings.xml
    private static List<String> parseSharedStrings(XSSFReader reader) {
        List<String> sharedStrings = new ArrayList<>();
        try (InputStream sharedStringsInputStream = reader.getSharedStringsData()) {
            SharedStringsParser sharedStringsParser = new SharedStringsParser(sharedStrings);
            XMLReader xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader();
            xmlReader.setContentHandler(sharedStringsParser);
            xmlReader.parse(new InputSource(sharedStringsInputStream));
        } catch (IOException e) {
            System.err.println("IOException while reading shared strings: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Error while parsing shared strings: " + e.getMessage());
        }
        return sharedStrings;
    }

    // Custom SAX handler to parse shared strings
    static class SharedStringsParser extends DefaultHandler {
        private final List<String> sharedStrings;
        private boolean isTextElement = false;
        private StringBuilder currentText = new StringBuilder();

        public SharedStringsParser(List<String> sharedStrings) {
            this.sharedStrings = sharedStrings;
        }

        @Override
        public void startElement(String uri, String localName, String qName, Attributes attributes) {
            if ("t".equals(qName)) {
                // Start of a shared string element
                isTextElement = true;
                currentText.setLength(0); // Clear previous text
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) {
            if (isTextElement) {
                currentText.append(ch, start, length); // Collect the text of the shared string
            }
        }

        @Override
        public void endElement(String uri, String localName, String qName) {
            if ("t".equals(qName)) {
                // End of a shared string element
                sharedStrings.add(currentText.toString());
                isTextElement = false;
            }
        }
    }

    // SAX Handler for parsing the main sheet and extracting unique values
    static class UniqueValueHandler extends DefaultHandler {
        private final Set<String> uniqueValues = new HashSet<>();
        private final String targetColumn;
        private final List<String> sharedStrings;

        private boolean isValueElement = false;
        private StringBuilder currentValue = new StringBuilder();
        private String currentCellReference;
        private String cellType;

        public UniqueValueHandler(String targetColumn, List<String> sharedStrings) {
            this.targetColumn = targetColumn.toUpperCase();  // Convert to uppercase for uniformity
            this.sharedStrings = sharedStrings;
        }

        public Set<String> getUniqueValues() {
            return uniqueValues;
        }

        @Override
        public void startElement(String uri, String localName, String qName, Attributes attributes) {
            if ("c".equals(qName)) {
                // Get cell reference and type (t)
                currentCellReference = attributes.getValue("r");
                cellType = attributes.getValue("t");
            }

            // Check if inside a value tag (v)
            if ("v".equals(qName)) {
                isValueElement = true;
                currentValue.setLength(0); // Reset the value
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) {
            if (isValueElement) {
                currentValue.append(ch, start, length); // Collect value
            }
        }

        @Override
        public void endElement(String uri, String localName, String qName) {
            if ("v".equals(qName)) {
                isValueElement = false;

                String value = currentValue.toString().trim();
                if (currentCellReference != null && currentCellReference.startsWith(targetColumn)) {
                    if ("s".equals(cellType)) {
                        // Shared string type (s)
                        int index = Integer.parseInt(value);
                        value = sharedStrings.get(index); // Retrieve shared string from the list
                    } else if ("b".equals(cellType)) {
                        // Boolean type (b)
                        value = "1".equals(value) ? "TRUE" : "FALSE";
                    } else if (cellType == null || "n".equals(cellType)) {
                        // Numeric or formula type
                        // The value is already numeric, so no change
                    }

                    // Add value to unique set if it's not empty
                    if (!value.isEmpty()) {
                        uniqueValues.add(value);
                    }
                }
            }
        }
    }
}