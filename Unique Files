import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.SharedStringsTable;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.InputStream;
import java.util.HashSet;

public class ExcelAllCellTypesExtractor {

    /**
     * Fetches unique values from a specific column of a specified sheet in an Excel file, handling all cell types.
     *
     * @param filePath   The path to the Excel file.
     * @param sheetName  The name of the sheet to process.
     * @param columnName The column name (e.g., "A", "B") from which to fetch unique values.
     * @return A set of unique values from the specified column.
     * @throws Exception If an error occurs while reading the file.
     */
    public HashSet<String> fetchUniqueValues(String filePath, String sheetName, String columnName) throws Exception {
        HashSet<String> uniqueValues = new HashSet<>();

        // Open the Excel file
        OPCPackage pkg = OPCPackage.open(filePath);
        XSSFReader reader = new XSSFReader(pkg);
        SharedStringsTable sharedStringsTable = reader.getSharedStringsTable();

        // Locate the target sheet by name
        XSSFReader.SheetIterator sheets = (XSSFReader.SheetIterator) reader.getSheetsData();
        InputStream targetSheetStream = null;
        while (sheets.hasNext()) {
            InputStream sheetStream = sheets.next();
            if (sheets.getSheetName().equalsIgnoreCase(sheetName)) {
                targetSheetStream = sheetStream;
                break;
            }
            sheetStream.close();
        }

        if (targetSheetStream == null) {
            pkg.close();
            throw new IllegalArgumentException("Sheet with name '" + sheetName + "' not found.");
        }

        // Create a SAX parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
        SAXParser saxParser = factory.newSAXParser();
        XMLReader xmlReader = saxParser.getXMLReader();

        // Custom handler to process unique values for the specified column
        AllCellTypesHandler handler = new AllCellTypesHandler(columnName, sharedStringsTable);
        xmlReader.setContentHandler(handler);

        // Parse the target sheet
        InputSource sheetSource = new InputSource(targetSheetStream);
        xmlReader.parse(sheetSource);

        targetSheetStream.close();
        pkg.close();

        return handler.getUniqueValues();
    }
}

// Custom SAX handler to handle all cell types
class AllCellTypesHandler extends org.xml.sax.helpers.DefaultHandler {
    private final HashSet<String> uniqueValues = new HashSet<>();
    private final String targetColumn;
    private final SharedStringsTable sharedStringsTable;
    private boolean isValueElement = false;
    private StringBuilder currentValue = new StringBuilder();
    private String currentCellReference;
    private String cellType;

    public AllCellTypesHandler(String targetColumn, SharedStringsTable sharedStringsTable) {
        this.targetColumn = targetColumn.toUpperCase();
        this.sharedStringsTable = sharedStringsTable;
    }

    public HashSet<String> getUniqueValues() {
        return uniqueValues;
    }

    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes) {
        // Detect when inside a cell element
        if ("c".equals(qName)) {
            currentCellReference = attributes.getValue("r"); // Get cell reference (e.g., A1, B2)
            cellType = attributes.getValue("t"); // Cell type (e.g., string, boolean, etc.)
        }

        // Detect when inside a value element
        if ("v".equals(qName)) {
            isValueElement = true;
            currentValue.setLength(0); // Reset the current value
        }
    }

    @Override
    public void characters(char[] ch, int start, int length) {
        if (isValueElement) {
            currentValue.append(ch, start, length);
        }
    }

    @Override
    public void endElement(String uri, String localName, String qName) {
        // Add the value to the set when reaching the end of a value element
        if ("v".equals(qName)) {
            isValueElement = false;

            // Extract the value based on the cell type
            String value = currentValue.toString().trim();
            if (currentCellReference != null && currentCellReference.startsWith(targetColumn)) {
                if ("s".equals(cellType)) {
                    // Handle shared string cell type
                    int index = Integer.parseInt(value);
                    value = sharedStringsTable.getItemAt(index).getString();
                } else if ("b".equals(cellType)) {
                    // Handle boolean cell type
                    value = "1".equals(value) ? "TRUE" : "FALSE";
                } else if (cellType == null || "n".equals(cellType)) {
                    // Numeric or formula type: Value is already in the correct format
                }

                if (!value.isEmpty()) {
                    uniqueValues.add(value);
                }
            }
        }
    }
}