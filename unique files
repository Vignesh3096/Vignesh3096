import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ExcelUniqueValues {

    public static void main(String[] args) {
        String excelFilePath = "path/to/your/excel/file.xlsx"; // Replace with your file path
        String targetSheetName = "YourSheetName"; // Replace with your target sheet name
        String targetColumnName = "YourColumnName"; // Replace with your target column name

        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Get the sheet by name
            Sheet sheet = workbook.getSheet(targetSheetName);
            if (sheet == null) {
                System.out.println("Sheet name '" + targetSheetName + "' not found.");
                return;
            }

            // Read the header row
            Row headerRow = sheet.getRow(0);
            if (headerRow == null) {
                System.out.println("Header row not found in sheet '" + targetSheetName + "'.");
                return;
            }

            // Map column names to indices
            Map<String, Integer> columnMap = new HashMap<>();
            for (Cell cell : headerRow) {
                columnMap.put(cell.getStringCellValue(), cell.getColumnIndex());
            }

            // Get the column index for the target column name
            Integer targetColumnIndex = columnMap.get(targetColumnName);
            if (targetColumnIndex == null) {
                System.out.println("Column name '" + targetColumnName + "' not found in the header row.");
                return;
            }

            // Define a set to store unique values
            Set<String> uniqueValues = new HashSet<>();

            // Create a DataFormatter to format cell values as strings
            DataFormatter dataFormatter = new DataFormatter();
            FormulaEvaluator formulaEvaluator = workbook.getCreationHelper().createFormulaEvaluator();

            // Iterate over rows, skipping the header row
            for (int rowIndex = 1; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    // Get value from the target column
                    Cell cell = row.getCell(targetColumnIndex);
                    if (cell != null) {
                        // Evaluate the cell if it contains a formula
                        if (cell.getCellType() == CellType.FORMULA) {
                            cell = formulaEvaluator.evaluateInCell(cell);
                        }

                        // Get the formatted cell value as a string
                        String cellValue = dataFormatter.formatCellValue(cell);
                        uniqueValues.add(cellValue);
                    }
                }
            }

            // Print unique values
            System.out.println("Unique values in column '" + targetColumnName + "' in sheet '" + targetSheetName + "': " + uniqueValues);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}